@model eCommerceProject.ViewModel.ProductVM

@{
	ViewBag.Title = "Create";
	Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<h2>Create</h2>

@using (Html.BeginForm("Create", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
	@Html.AntiForgeryToken()

<div class="form-horizontal">
	<h4>Product</h4>
	<hr />
	@Html.ValidationSummary(true, "", new { @class = "text-danger" })
	<div class="form-group">
		@Html.Label("Product Name", htmlAttributes: new { @class = "control-label col-md-2" })
		<div class="col-md-10">
			@Html.EditorFor(model => model.Product.ProductName, new { htmlAttributes = new { @class = "form-control" } })
			@Html.ValidationMessageFor(model => model.Product.ProductName, "", new { @class = "text-danger" })
		</div>
	</div>
	<div class="form-group">
		@Html.Label("Category", new { @class = "col-md-2 control-label" })
		<div class="col-md-10">
			@Html.DropDownListFor(m => m.Id, new SelectList(Model.Categories, "Id", "CategoryName"), "Select Category", new { @class = "dropdown form-control" })
		</div>
	</div>

	<div class="form-group">
		@Html.Label("Short Description", htmlAttributes: new { @class = "control-label col-md-2" })
		<div class="col-md-10">
			@Html.EditorFor(model => model.Product.ShortDesc, new { htmlAttributes = new { @class = "form-control" } })
			@Html.ValidationMessageFor(model => model.Product.ShortDesc, "", new { @class = "text-danger" })
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(model => model.Product.Description, htmlAttributes: new { @class = "control-label col-md-2" })
		<div class="col-md-10">
			@Html.TextAreaFor(model => model.Product.Description, new { @class = "form-control content-editor" })
			@Html.ValidationMessageFor(model => model.Product.Description, "", new { @class = "text-danger" })
		</div>
	</div>


	<div class="form-group">
		<div class="col-md-10">
			<label>Choose file: </label><br />
			<a class="btnAddNew" href="#">Thêm</a>
			<br />
			<div id="myinput" class="myinput">
				<input type="file" name="uploadFile[0]" required /><br />
			</div>
			<br />
			</div>
		</div>




		<div class="form-group">
			@Html.LabelFor(model => model.Product.Price, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Product.Price, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Product.Price, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Product.Discount, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Product.Discount, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Product.Discount, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.Label(" Total Stock", htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Product.UnitsInStock, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Product.UnitsInStock, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.Label("Active", htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.CheckBoxFor(model => model.Product.BestSellers, new { data_toggle = "toggle", data_onstyle = "success" })

				@Html.ValidationMessageFor(m => m.Product.BestSellers, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.Label("Best Sellers", htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.CheckBoxFor(model => model.Product.Active, new { data_toggle = "toggle", data_onstyle = "success" })

				@Html.ValidationMessageFor(m => m.Product.Active, "", new { @class = "text-danger" })
			</div>
		</div>
		@Html.HiddenFor(t => t.Product.CreatedDate)


		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Create" class="btn btn-success btn-tone col-md-12" />
			</div>
		</div>
	</div>
	}

	<div>
		@Html.ActionLink("Back to List", "Index")
	</div>
	@section Scripts {
		@Scripts.Render("~/bundles/jqueryval")
		<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
		<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.20/summernote.css" integrity="sha512-vff/nplkvWotqQwl1EM/zjrIqsbIeUKRUgLk+qeiZZkjAimu/BGmDg4OjZBG6r+GV0HcJwrZPjRVi0wPvUJuhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
		<script src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.20/summernote.js" integrity="sha512-iiWBczJtlBRDbGK5MLRgLii3o9B5qTOp7FKUl7NLCzejJL7upsHPAg2li8LIV49y5pTLNMfnxYIRajAB+Ph4rw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

		<script type="text/javascript">
			$(document).ready(function () {
				var max_fields = 10; //maximum input boxes allowed
				var wrapper = $(".myinput"); //Fields wrapper
				var add_button = $(".btnAddNew"); //Add button ID

				var x = 0; //initlal text box count
				$(add_button).click(function (e) { //on add input button click
					e.preventDefault();
					if (x < max_fields) { //max input box allowed
						x++; //text box increment
						$(wrapper).append('<div>   <input type="file" name="uploadFile[' + x + ']" /><a href="#" class="btnRemove">Xóa</a></div>'); //add input box
					}
				});

				$(wrapper).on("click", ".btnRemove", function (e) { //user click on remove text
					e.preventDefault(); $(this).parent('div').remove(); x--;
				})
			});

			$(document).ready(function () {
				$(".content-editor").summernote({
					height: 300,
					minHeight: null,
					maxHeight: null,
					codemirror: {
						theme: "monokai"
					},
					callbacks: {
						onImageUpload: function (files) {
							for (var i = 0; i < files.length; i++) {

								uploadImage(files[i]);
							}
						}
					},
					fontSizes: ['12', '14', '16', '18', '24', '36', '48'],
					toolbar: [
						['style', ['style']],
						['font', ['bold', 'underline', 'clear']],
						['fontname', ['fontname']],
						['fontsize', ['fontsize']],
						['color', ['color']],
						['para', ['ul', 'ol', 'paragraph']],
						['table', ['table']],
						['insert', ['link', 'picture', 'video']],
						['view', ['fullscreen', 'codeview', 'help']],
					],
				});
			});
			function uploadImage(file) {
				var formData = new FormData();
				formData.append("uploadedFiles", file);
				$.ajax({
					data: formData,
					type: "POST",
					url: '/BlogPosts/UploadFile',
					cache: false,
					contentType: false,

					processData: false,
					success: function (FileUrl) {
						alert(FileUrl);
						var imgNode = document.createElement('img');
						imgNode.src = FileUrl;
						$('.content-editor').summernote('insertNode', imgNode);
					},
					error: function (data) {
						alert(data.responseText);
					}
				});
			}
			//view image thumb////////////////////////////////////////////////////////////////////////
			$(document).ready(function () {

				$("#imageBrowes").change(function () {

					var File = this.files;

					if (File && File[0]) {
						ReadImage(File[0]);
					}

				})


			})


			var ReadImage = function (file) {

				var reader = new FileReader;
				var image = new Image;

				reader.readAsDataURL(file);
				reader.onload = function (_file) {

					image.src = _file.target.result;
					image.onload = function () {

						var height = this.height;
						var width = this.width;
						var type = file.type;
						var size = ~~(file.size / 1024) + "KB";

						$("#targetImg").attr('src', _file.target.result);
						$("#description").text("Size:" + size + ", " + height + "X " + width + ", " + type + "");
						$("#imgPreview").show();

					}

				}

			}

			var ClearPreview = function () {
				$("#imageBrowes").val('');
				$("#description").text('');
				$("#imgPreview").hide();

			}

			$(function () {
				function togglePackage() {
					var isPackage = $("#package-checkbox").is(":checked");
					if (isPackage) {
						$("#datapoint-checkbox").prop("checked", true).prop("disabled", true);
						$("input[type='hidden'][name='isPublic']").val("true");
					}
					else {
						$("#datapoint-checkbox").prop("disabled", false);
						$("input[type='hidden'][name='isHotNews']").val("false");
					}
				};

				$(document).on('change', '#package-checkbox', togglePackage);
				togglePackage();
			});
		</script>
	}
